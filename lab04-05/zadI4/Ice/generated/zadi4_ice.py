# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `zadi4.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module OperationsWithOptionals
_M_OperationsWithOptionals = Ice.openModule('OperationsWithOptionals')
__name__ = 'OperationsWithOptionals'

if 'EEnum' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.EEnum = Ice.createTempClass()
    class EEnum(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    EEnum.CYAN = EEnum("CYAN", 0)
    EEnum.YELLOW = EEnum("YELLOW", 1)
    EEnum.MAGENTA = EEnum("MAGENTA", 2)
    EEnum._enumerators = { 0:EEnum.CYAN, 1:EEnum.YELLOW, 2:EEnum.MAGENTA }

    _M_OperationsWithOptionals._t_EEnum = IcePy.defineEnum('::OperationsWithOptionals::EEnum', EEnum, (), EEnum._enumerators)

    _M_OperationsWithOptionals.EEnum = EEnum
    del EEnum

if 'NoInput' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.NoInput = Ice.createTempClass()
    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::OperationsWithOptionals::NoInput'

    _M_OperationsWithOptionals._t_NoInput = IcePy.defineException('::OperationsWithOptionals::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_OperationsWithOptionals._t_NoInput

    _M_OperationsWithOptionals.NoInput = NoInput
    del NoInput

if 'Time' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.Time = Ice.createTempClass()
    class Time(Ice.Value):
        def __init__(self, hours=0, minutes=0, seconds=Ice.Unset):
            self.hours = hours
            self.minutes = minutes
            self.seconds = seconds

        def ice_id(self):
            return '::OperationsWithOptionals::Time'

        @staticmethod
        def ice_staticId():
            return '::OperationsWithOptionals::Time'

        def __str__(self):
            return IcePy.stringify(self, _M_OperationsWithOptionals._t_Time)

        __repr__ = __str__

    _M_OperationsWithOptionals._t_Time = IcePy.defineValue('::OperationsWithOptionals::Time', Time, -1, (), False, False, None, (
        ('hours', (), IcePy._t_int, False, 0),
        ('minutes', (), IcePy._t_int, False, 0),
        ('seconds', (), IcePy._t_int, True, 3)
    ))
    Time._ice_type = _M_OperationsWithOptionals._t_Time

    _M_OperationsWithOptionals.Time = Time
    del Time

if 'Request' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.Request = Ice.createTempClass()
    class Request(Ice.Value):
        def __init__(self, intArg=0, strArg='', enumArg=_M_OperationsWithOptionals.EEnum.CYAN, timeArg=None, optIntArg=Ice.Unset, optStrArg=Ice.Unset, optEnumArg=Ice.Unset, optTimeArg=Ice.Unset):
            self.intArg = intArg
            self.strArg = strArg
            self.enumArg = enumArg
            self.timeArg = timeArg
            self.optIntArg = optIntArg
            self.optStrArg = optStrArg
            self.optEnumArg = optEnumArg
            self.optTimeArg = optTimeArg

        def ice_id(self):
            return '::OperationsWithOptionals::Request'

        @staticmethod
        def ice_staticId():
            return '::OperationsWithOptionals::Request'

        def __str__(self):
            return IcePy.stringify(self, _M_OperationsWithOptionals._t_Request)

        __repr__ = __str__

    _M_OperationsWithOptionals._t_Request = IcePy.declareValue('::OperationsWithOptionals::Request')

    _M_OperationsWithOptionals._t_Request = IcePy.defineValue('::OperationsWithOptionals::Request', Request, -1, (), False, False, None, (
        ('intArg', (), IcePy._t_int, False, 0),
        ('strArg', (), IcePy._t_string, False, 0),
        ('enumArg', (), _M_OperationsWithOptionals._t_EEnum, False, 0),
        ('timeArg', (), _M_OperationsWithOptionals._t_Time, False, 0),
        ('optIntArg', (), IcePy._t_int, True, 5),
        ('optStrArg', (), IcePy._t_string, True, 6),
        ('optEnumArg', (), _M_OperationsWithOptionals._t_EEnum, True, 7),
        ('optTimeArg', (), _M_OperationsWithOptionals._t_Time, True, 8)
    ))
    Request._ice_type = _M_OperationsWithOptionals._t_Request

    _M_OperationsWithOptionals.Request = Request
    del Request

if 'Response' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.Response = Ice.createTempClass()
    class Response(Ice.Value):
        def __init__(self, strResp='', enumArg=_M_OperationsWithOptionals.EEnum.CYAN, optStrResp=Ice.Unset, optEnumArg=Ice.Unset):
            self.strResp = strResp
            self.enumArg = enumArg
            self.optStrResp = optStrResp
            self.optEnumArg = optEnumArg

        def ice_id(self):
            return '::OperationsWithOptionals::Response'

        @staticmethod
        def ice_staticId():
            return '::OperationsWithOptionals::Response'

        def __str__(self):
            return IcePy.stringify(self, _M_OperationsWithOptionals._t_Response)

        __repr__ = __str__

    _M_OperationsWithOptionals._t_Response = IcePy.defineValue('::OperationsWithOptionals::Response', Response, -1, (), False, False, None, (
        ('strResp', (), IcePy._t_string, False, 0),
        ('enumArg', (), _M_OperationsWithOptionals._t_EEnum, False, 0),
        ('optStrResp', (), IcePy._t_string, True, 3),
        ('optEnumArg', (), _M_OperationsWithOptionals._t_EEnum, True, 4)
    ))
    Response._ice_type = _M_OperationsWithOptionals._t_Response

    _M_OperationsWithOptionals.Response = Response
    del Response

_M_OperationsWithOptionals._t_ExampleService = IcePy.defineValue('::OperationsWithOptionals::ExampleService', Ice.Value, -1, (), False, True, None, ())

if 'ExampleServicePrx' not in _M_OperationsWithOptionals.__dict__:
    _M_OperationsWithOptionals.ExampleServicePrx = Ice.createTempClass()
    class ExampleServicePrx(Ice.ObjectPrx):

        def OppOperation(self, request, context=None):
            return _M_OperationsWithOptionals.ExampleService._op_OppOperation.invoke(self, ((request, ), context))

        def OppOperationAsync(self, request, context=None):
            return _M_OperationsWithOptionals.ExampleService._op_OppOperation.invokeAsync(self, ((request, ), context))

        def begin_OppOperation(self, request, _response=None, _ex=None, _sent=None, context=None):
            return _M_OperationsWithOptionals.ExampleService._op_OppOperation.begin(self, ((request, ), _response, _ex, _sent, context))

        def end_OppOperation(self, _r):
            return _M_OperationsWithOptionals.ExampleService._op_OppOperation.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_OperationsWithOptionals.ExampleServicePrx.ice_checkedCast(proxy, '::OperationsWithOptionals::ExampleService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_OperationsWithOptionals.ExampleServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::OperationsWithOptionals::ExampleService'
    _M_OperationsWithOptionals._t_ExampleServicePrx = IcePy.defineProxy('::OperationsWithOptionals::ExampleService', ExampleServicePrx)

    _M_OperationsWithOptionals.ExampleServicePrx = ExampleServicePrx
    del ExampleServicePrx

    _M_OperationsWithOptionals.ExampleService = Ice.createTempClass()
    class ExampleService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::OperationsWithOptionals::ExampleService')

        def ice_id(self, current=None):
            return '::OperationsWithOptionals::ExampleService'

        @staticmethod
        def ice_staticId():
            return '::OperationsWithOptionals::ExampleService'

        def OppOperation(self, request, current=None):
            raise NotImplementedError("servant method 'OppOperation' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_OperationsWithOptionals._t_ExampleServiceDisp)

        __repr__ = __str__

    _M_OperationsWithOptionals._t_ExampleServiceDisp = IcePy.defineClass('::OperationsWithOptionals::ExampleService', ExampleService, (), None, ())
    ExampleService._ice_type = _M_OperationsWithOptionals._t_ExampleServiceDisp

    ExampleService._op_OppOperation = IcePy.Operation('OppOperation', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_OperationsWithOptionals._t_Request, False, 0),), (), ((), _M_OperationsWithOptionals._t_Response, False, 0), ())

    _M_OperationsWithOptionals.ExampleService = ExampleService
    del ExampleService

# End of module OperationsWithOptionals
