// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: grpcproject.proto

package grpcproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcProject_Subscribe_FullMethodName = "/GrpcProject/Subscribe"
)

// GrpcProjectClient is the client API for GrpcProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcProjectClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GrpcProject_SubscribeClient, error)
}

type grpcProjectClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcProjectClient(cc grpc.ClientConnInterface) GrpcProjectClient {
	return &grpcProjectClient{cc}
}

func (c *grpcProjectClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (GrpcProject_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcProject_ServiceDesc.Streams[0], GrpcProject_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcProjectSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcProject_SubscribeClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type grpcProjectSubscribeClient struct {
	grpc.ClientStream
}

func (x *grpcProjectSubscribeClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcProjectServer is the server API for GrpcProject service.
// All implementations must embed UnimplementedGrpcProjectServer
// for forward compatibility
type GrpcProjectServer interface {
	Subscribe(*SubscribeRequest, GrpcProject_SubscribeServer) error
	mustEmbedUnimplementedGrpcProjectServer()
}

// UnimplementedGrpcProjectServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcProjectServer struct {
}

func (UnimplementedGrpcProjectServer) Subscribe(*SubscribeRequest, GrpcProject_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedGrpcProjectServer) mustEmbedUnimplementedGrpcProjectServer() {}

// UnsafeGrpcProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcProjectServer will
// result in compilation errors.
type UnsafeGrpcProjectServer interface {
	mustEmbedUnimplementedGrpcProjectServer()
}

func RegisterGrpcProjectServer(s grpc.ServiceRegistrar, srv GrpcProjectServer) {
	s.RegisterService(&GrpcProject_ServiceDesc, srv)
}

func _GrpcProject_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcProjectServer).Subscribe(m, &grpcProjectSubscribeServer{stream})
}

type GrpcProject_SubscribeServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type grpcProjectSubscribeServer struct {
	grpc.ServerStream
}

func (x *grpcProjectSubscribeServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

// GrpcProject_ServiceDesc is the grpc.ServiceDesc for GrpcProject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcProject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GrpcProject",
	HandlerType: (*GrpcProjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GrpcProject_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcproject.proto",
}
